---
import Navigation from '../components/layout/navigation/Navigation.astro'
import Footer from '../components/layout/Footer.astro'
import '../styles/global.css'

export interface Props {
  title: string
  description?: string
}

const { title, description } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)

// TODO: find a better image
// TODO: image should be dynamic based on page
const socialImageURL = new URL('/images/social-media.jpg', canonicalURL)
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- SEO -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content="Web Develepment, Web Design, Web Developer, Web Designer, Frontend Developer, Frontend Designer, Frontend, Frontend Design, Frontend Engineer, Frontend Engineering, Frontend Development, Creative Developer, Creative Engineer, Creative Engineering, Creative Development, Creative Design, Creative Designer, Art, Artist, Artistic, Freelance, Freelancer, Freelancing, Freelance Developer, Freelance Designer, Freelance Engineer, Freelance Engineering, Freelance Development, Freelance Design"
    />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Facebook -->
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:domain" content="wavelandweb.com" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Marcellus&family=Outfit&display=swap"
      rel="stylesheet"
    />

    <!-- Favicon & Theme -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#000000" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta name="theme-color" content="#000000" />
  </head>
  <body>
    <div class="site-wrapper">
      <Navigation />
      <slot />
      <Footer />
    </div>
  </body>
</html>

<script>
  function handleActiveSiteSectionsOnScroll() {
    if (!window.IntersectionObserver) return console.log('IntersectionObserver not supported')

    // Grab sections
    const sections = document.querySelectorAll('.site-section') as NodeListOf<HTMLElement>

    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1,
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const section = entry.target as HTMLElement
          section.classList.add('active')
        }
      })
    }, options)

    sections.forEach((section) => observer.observe(section))
  }

  document.addEventListener('scroll', handleActiveSiteSectionsOnScroll)
</script>
